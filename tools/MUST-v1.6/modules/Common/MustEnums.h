/* This file is part of MUST (Marmot Umpire Scalable Tool)
 *
 * Copyright (C)
 *  2010-2016 ZIH, Technische Universitaet Dresden, Federal Republic of Germany
 *  2010-2018 Lawrence Livermore National Laboratories, United States of America
 *  2013-2018 RWTH Aachen University, Federal Republic of Germany
 *
 * See the LICENSE file in the package base directory for details
 */

/**
 * @file MustEnums.h
 *       Global enumerations used for MUST.
 *
 *  @date 21.01.2010
 *  @author Tobias Hilbrich
 */

#include "MustTypes.h"
#ifndef MUSTENUMS_H
#define MUSTENUMS_H

namespace must
{
    /**
     * Enumeration for arc types.
     */
    enum ArcType
    {
        ARC_AND = 0,
        ARC_OR
    };

    /**
     * Enumeration of all collective communications.
     * IMPORTANT: these serve both for the blocking and non-blocking
     *            versions of the collectives. E.g., MUST_COLL_GATHER
     *            is used for both MPI_Gather and MPI_Igather.
     *            The two will differentiate in the fact that they may
     *            or may not have a request.
     */
    enum MustCollCommType
    {
        MUST_COLL_GATHER = 1,
        MUST_COLL_GATHERV,
        MUST_COLL_REDUCE,
        MUST_COLL_BCAST,
        MUST_COLL_SCATTER,
        MUST_COLL_SCATTERV,
        MUST_COLL_ALLGATHER,
        MUST_COLL_ALLGATHERV,
        MUST_COLL_ALLTOALL,
        MUST_COLL_ALLTOALLV,
        MUST_COLL_ALLTOALLW,
        MUST_COLL_ALLREDUCE,
        MUST_COLL_REDUCE_SCATTER,
        MUST_COLL_REDUCE_SCATTER_BLOCK,
        MUST_COLL_SCAN,
        MUST_COLL_EXSCAN,
        MUST_COLL_BARRIER,
        MUST_COLL_CART_CREATE,
        MUST_COLL_CART_SUB,
        MUST_COLL_COMM_CREATE,
        MUST_COLL_COMM_DUP,
        MUST_COLL_COMM_FREE,
        MUST_COLL_COMM_SPLIT,
        MUST_COLL_FINALIZE,
        MUST_COLL_GRAPH_CREATE,
        MUST_COLL_INTERCOMM_CREATE,
        MUST_COLL_INTERCOMM_MERGE,
        MUST_COLL_UNKNOWN /*Used for invalid initialization and queriny the size of the enum*/
    };

    enum MustSendMode
	{
		MUST_BUFFERED_SEND = 0,
		MUST_READY_SEND = 1,
		MUST_SYNCHRONIZED_SEND = 2,
		MUST_STANDARD_SEND = 3,
		MUST_UNKNOWN_SEND
	};

	enum MustMessageIdNames
	{
        //Success
        MUST_MESSAGE_NO_ERROR = 0,
		//Errors
		MUST_ERROR_INTEGER_NEGATIVE,
		MUST_ERROR_INTEGER_ZERO,
		MUST_ERROR_INTEGER_NEGATIVE_ARRAY,
		MUST_ERROR_INTEGER_ENTRY_GREATER_OR_EQUAL,
		MUST_ERROR_INTEGER_NEGATIVE_NOT_PROC_NULL_ANY_SOURCE,
		MUST_ERROR_INTEGER_NEGATIVE_NOT_PROC_NULL,
		MUST_ERROR_INTEGER_NEGATIVE_NOT_PROC_NULL_ARRAY,
		MUST_ERROR_INTEGER_NEGATIVE_PROC_NULL_ANY_SOURCE,
		MUST_ERROR_INTEGER_NEGATIVE_UNDEFINED,
		MUST_ERROR_INTEGER_NOT_WITHIN_ZERO_TAG_UB,
		MUST_ERROR_INTEGER_NOT_WITHIN_ZERO_TAG_UB_ANY_TAG,
		MUST_ERROR_INTEGER_GREATER_COMM_SIZE,
		MUST_ERROR_INTEGER_GREATER_EQUAL_COMM_SIZE,
		MUST_ERROR_INTEGER_PRODUCT_GREATER_COMM_SIZE,
		MUST_ERROR_GROUP_RANGE_RANK,
		MUST_ERROR_GROUP_RANGE_STRIDE,
		MUST_ERROR_REQUEST_ACTIVE,
		MUST_ERROR_REQUEST_ACTIVE_ARRAY,
		MUST_ERROR_REQUEST_NOT_KNOWN,
		MUST_ERROR_REQUEST_NOT_KNOWN_ARRAY,
		MUST_ERROR_REQUEST_NULL,
		MUST_ERROR_REQUEST_NULL_ARRAY,
		MUST_ERROR_REQUEST_PERSISTENT_BUT_INACTIVE,
		MUST_ERROR_COMM_UNKNWOWN,
		MUST_ERROR_COMM_NULL,
		MUST_ERROR_NOT_CART_COMM,
		MUST_ERROR_NOT_GRAPH_COMM,
		MUST_ERROR_INTER_COMM,
		MUST_ERROR_INTER_COMM_MPI1,
		MUST_ERROR_ROOT_NOT_IN_COMM,
		MUST_ERROR_PREDEFINED_COMM,
		MUST_ERROR_NOT_INTER_COMM,
		MUST_ERROR_POINTER_NULL,
		MUST_ERROR_LEAK_COMM,
		MUST_ERROR_LEAK_DATATYPE,
		MUST_ERROR_LEAK_REQUEST,
		MUST_ERROR_LEAK_GROUP,
		MUST_ERROR_LEAK_ERR,
		MUST_ERROR_LEAK_KEYVAL,
		MUST_ERROR_LEAK_OP,
		MUST_ERROR_DIRECTION_GREATER_NDIMS,
        MUST_ERROR_DATATYPE_NULL,
        MUST_ERROR_DATATYPE_UNKNOWN,
        MUST_ERROR_DATATYPE_NOT_COMMITED,
		MUST_ERROR_GROUP_NULL,
		MUST_ERROR_GROUP_UNKNOWN,
		MUST_ERROR_INTEGER_GREATER_GROUP_SIZE,
		MUST_ERROR_INTEGER_DUPLICATION_ARRAY,
		MUST_ERROR_INTEGER_GREATER_GROUP_SIZE_ARRAY,
		MUST_ERROR_INTEGER_DUPLICATION_ARRAY_TRIPLET,
		MUST_ERROR_RANK_FROM_RANGES_NOT_IN_GROUP,
		MUST_ERROR_OPERATION_PREDEFINED,
		MUST_ERROR_OPERATION_UNKNOWN,
		MUST_ERROR_OPERATION_NULL,
		MUST_ERROR_POINTER_NULL_NOT_BOTTOM,
		MUST_ERROR_POINTER_NULL_COMM_SIZE,
		MUST_ERROR_POINTER_NULL_COMM_SIZE_ARRAY,
		MUST_ERROR_POINTER_NULL_COMM_SIZE_ARRAY_AT_INDEX,
		MUST_ERROR_MPI_IN_PLACE_USED,
        MUST_ERROR_SELFOVERLAPPED,
        MUST_ERROR_OVERLAPPED_SEND,
        MUST_ERROR_OVERLAPPED_RECV,
        MUST_ERROR_POINTER_NULL_STATUS_IGNORE,
        MUST_ERROR_TYPEMATCH_INTERNAL_NOTYPE,
        MUST_ERROR_TYPEMATCH_INTERNAL_TYPESIG,
        MUST_ERROR_TYPEMATCH_MISSMATCH,
        MUST_ERROR_TYPEMATCH_MISSMATCH_BYTE,
        MUST_ERROR_TYPEMATCH_LENGTH,
        MUST_ERROR_MESSAGE_LOST,
        MUST_ERROR_COLLECTIVE_CALL_MISSMATCH,
        MUST_ERROR_COLLECTIVE_OP_MISSMATCH,
        MUST_ERROR_COLLECTIVE_ROOT_MISSMATCH,
        MUST_ERROR_COLLECTIVE_BLOCKING_NONBLOCKING_MISSMATCH,
        MUST_ERROR_DEADLOCK,
        MUST_ERROR_BUFFER_REATTACH,
        MUST_ERROR_BUFFER_NOATTACHED,
        MUST_ERROR_COUNTS_ARRAYS_DIFFER,
        MUST_ERROR_MPI_MULTIPLE_THREADS,
        MUST_ERROR_UNSUPPORTED,
        MUST_ERROR_OPENMP, /**< @note yes yes, using OpenMP is an error these days ... Tobias would like some "specialization" being applied to the error code.*/
		
		//Warnings
		MUST_WARNING_INTEGER_ZERO,
		MUST_WARNING_INTEGER_ZERO_ARRAY,
		MUST_WARNING_INTEGER_NOT_ONE_OR_ZERO,
		MUST_WARNING_INTEGER_NOT_ONE_OR_ZERO_ARRAY,
		MUST_WARNING_INTEGER_HIGH_BUT_LESS_TAG_UB,
		MUST_WARNING_INTEGER_PRODUCT_LESS_COMM_SIZE,
		MUST_WARNING_INTER_COMM,
		MUST_WARNING_REQUEST_ACTIVE_RECV,
		MUST_WARNING_REQUEST_CANCELED,
		MUST_WARNING_REQUEST_NULL,
		MUST_WARNING_REQUEST_NULL_OR_INACTIVE_ARRAY,
		MUST_WARNING_REQUEST_INACTIVE,
		MUST_WARNING_NOT_CART_COMM,
		MUST_WARNING_INTER_COMM_MPI2,
		MUST_WARNING_COMM_NULL,
		MUST_WARNING_MAXDIMS_GREATER_NDIMS,
		MUST_WARNING_MAXNEIGHBORS_TO_SMALL,
		MUST_WARNING_MAXINDICES_TO_SMALL,
		MUST_WARNING_MAXEDGES_TO_SMALL,
        MUST_WARNING_DATATYPE_PREDEFINED,
        MUST_WARNING_DATATYPE_COMMITED,
        MUST_WARNING_DATATYPE_BAD_ALIGNMENT,
        MUST_WARNING_IF_EMPTY,
        MUST_WARNING_GROUP_NULL,
        MUST_WARNING_POINTER_NULL,
        MUST_WARNING_SELFOVERLAPPED,
        MUST_WARNING_BUFFER_OUTSIZED,
        MUST_WARNING_THREADLEVEL,

        //Informations
        MUST_INFO_FREE_NONPERSISTENT_REQUEST,
        MUST_INFO_MISSING_WC_SOURCE_EXPLORATION,
        MUST_INFO_MISSING_WC_SOURCE_EXPLORATION_STATISTICS,
        MUST_INFO_ENFORCED_WC_SOURCE_DECISION,

        //Last entry
		MUST_LAST_MESSAGE_ID_NAME
	};

}

/**
    * Enumeration of all predefined datatypes.
    */
enum MustMpiDatatypePredefined
{
    //Elementary C
    MUST_MPI_CHAR = 0,
    MUST_MPI_SHORT,
    MUST_MPI_INT,
    MUST_MPI_LONG,
    MUST_MPI_UNSIGNED_CHAR,
    MUST_MPI_UNSIGNED_SHORT,
    MUST_MPI_UNSIGNED,
    MUST_MPI_UNSIGNED_LONG,
    MUST_MPI_FLOAT,
    MUST_MPI_DOUBLE,
    MUST_MPI_LONG_DOUBLE,

    //Elementary C & Fortran
    MUST_MPI_BYTE,
    MUST_MPI_PACKED,

    //Elementary Fortran
    MUST_MPI_INTEGER,
    MUST_MPI_REAL,
    MUST_MPI_DOUBLE_PRECISION,
    MUST_MPI_COMPLEX,
    MUST_MPI_LOGICAL,
    MUST_MPI_CHARACTER,

    //Reduction types C
    MUST_MPI_FLOAT_INT,
    MUST_MPI_DOUBLE_INT,
    MUST_MPI_LONG_INT,
    MUST_MPI_2INT,
    MUST_MPI_SHORT_INT,
    MUST_MPI_LONG_DOUBLE_INT,

    //Reduction types Fortran
    MUST_MPI_2REAL,
    MUST_MPI_2DOUBLE_PRECISION,
    MUST_MPI_2INTEGER,
    MUST_MPI_2COMPLEX,
    MUST_MPI_2DOUBLE_COMPLEX,

    //Optional C
    MUST_MPI_LONG_LONG_INT,
    MUST_MPI_LONG_LONG,
    MUST_MPI_UNSIGNED_LONG_LONG,
    MUST_MPI_WCHAR,
    MUST_MPI_SIGNED_CHAR,

    //Optional C++
    MUST_MPI_CXX_BOOL,
    MUST_MPI_CXX_FLOAT_COMPLEX,
    MUST_MPI_CXX_DOUBLE_COMPLEX,
    MUST_MPI_CXX_LONG_DOUBLE_COMPLEX,

    //Optional Fortran
    MUST_MPI_INTEGER1,
    MUST_MPI_INTEGER2,
    MUST_MPI_INTEGER4,
    MUST_MPI_INTEGER8,
    MUST_MPI_INTEGER16,
    MUST_MPI_REAL2,
    MUST_MPI_REAL4,
    MUST_MPI_REAL8,
    MUST_MPI_REAL16,
    MUST_MPI_DOUBLE_COMPLEX,
    MUST_MPI_COMPLEX8,
    MUST_MPI_COMPLEX16,
    MUST_MPI_COMPLEX32,
    MUST_MPI_LOGICAL1,
    MUST_MPI_LOGICAL2,
    MUST_MPI_LOGICAL4,
    MUST_MPI_LOGICAL8,
    MUST_MPI_LOGICAL16,

    //Bound markers
    MUST_MPI_UB,
    MUST_MPI_LB,

    //Elementary C (MPI-2.2)
    MUST_MPI_C_BOOL,
    MUST_MPI_INT8_T,
    MUST_MPI_INT16_T,
    MUST_MPI_INT32_T,
    MUST_MPI_INT64_T,
    MUST_MPI_UINT8_T,
    MUST_MPI_UINT16_T,
    MUST_MPI_UINT32_T,
    MUST_MPI_UINT64_T,
    MUST_MPI_C_COMPLEX,
    MUST_MPI_C_FLOAT_COMPLEX,
    MUST_MPI_C_DOUBLE_COMPLEX,
    MUST_MPI_C_LONG_DOUBLE_COMPLEX,


    MUST_MPI_DATATYPE_UNKNOWN
};

/**
    * Enumeration of all predefined communicators.
    */
enum MustMpiCommPredefined
{
    MUST_MPI_COMM_WORLD = 0,
    MUST_MPI_COMM_SELF,

    MUST_MPI_COMM_UNKNOWN
};

/**
    * Enumeration of all predefined errs.
    */
enum MustMpiErrPredefined
{
    MUST_MPI_ERRORS_ARE_FATAL =0,
    MUST_MPI_ERRORS_RETURN,

    MUST_MPI_ERRORS_UNKNOWN
};

/**
    * Enumeration of all predefined groups.
    * Not used for values returned to the user as we only have one of them,
    * we still need some enum for internal use.
    */
enum MustMpiGroupPredefined
{
    MUST_MPI_GROUP_EMPTY =0,

    MUST_MPI_GROUP_UNKNOWN
};

/**
    * Enumeration of all predefined keyvals.
    */
enum MustMpiKeyvalPredefined
{
    MUST_MPI_KEY_TAG_UB =0,
    MUST_MPI_KEY_IO,
    MUST_MPI_KEY_HOST,
    MUST_MPI_KEY_WTIME_IS_GLOBAL,

    MUST_MPI_KEY_UNKNOWN
};

/**
    * Enumeration of all predefined ops.
    */
enum MustMpiOpPredefined
{
    MUST_MPI_OP_MAX =0,
    MUST_MPI_OP_MIN,
    MUST_MPI_OP_SUM,
    MUST_MPI_OP_PROD,
    MUST_MPI_OP_LAND,
    MUST_MPI_OP_BAND,
    MUST_MPI_OP_LOR,
    MUST_MPI_OP_BOR,
    MUST_MPI_OP_LXOR,
    MUST_MPI_OP_BXOR,
    MUST_MPI_OP_MAXLOC,
    MUST_MPI_OP_MINLOC,

    MUST_MPI_OP_UNKNOWN
};

/**
 * Return state when processing an operation:
 * - PROCESSING_SUCCESS: successful processing, the
 *       operation can be removed from the queue
 * - PROCESSING_ERROR: some critical error occurred
 * - PROCESSING_REEXECUTE: the operation discovered
 *       that it can't be processed at the moment (and
 *       updated I_OperationReordering accordingly). This
 *       causes the operation to stay in the queues and be
 *       processed once its newly set block or suspension
 *       is removed.
 */
enum PROCESSING_RETURN
{
    PROCESSING_SUCCESS = 0,
    PROCESSING_ERROR,
    PROCESSING_REEXECUTE
};

#endif /*MUSTENUMS_H*/
