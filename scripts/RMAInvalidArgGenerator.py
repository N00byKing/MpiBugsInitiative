#! /usr/bin/python3
import sys
from generator_utils import *

template = """// @{generatedby}@
/* ///////////////////////// The MPI Bugs Initiative ////////////////////////

  Origin: MBI

  Description: @{shortdesc}@
    @{longdesc}@

BEGIN_MPI_FEATURES
	P2P!basic: Lacking 
	P2P!nonblocking: Lacking
	P2P!persistent: Lacking
	COLL!basic: Lacking
	COLL!nonblocking: Lacking
	COLL!persistent: Lacking
	COLL!tools: Lacking
	RMA: @{rmafeature}@
END_MPI_FEATURES

BEGIN_MBI_TESTS
  $ mpirun -np 2 ${EXE}
  | @{outcome}@
  | @{errormsg}@
END_MBI_TESTS
//////////////////////       End of MBI headers        /////////////////// */

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>


int main(int argc, char **argv) {
  int nprocs = -1;
  int rank = -1;
	MPI_Win win;
  int W; // Window buffer
	int NUM_ELEMT=1;

  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  printf("Hello from rank %d \\n", rank);

  if (nprocs < 2)
    printf("MBI ERROR: This test needs at least 2 processes to produce a bug!\\n");

	MPI_Datatype type = MPI_INT;

	int target = (rank + 1) % nprocs;
  W = 4;

  MPI_Win_create(&W, NUM_ELEMT * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win);

	@{change_arg}@

  @{epoch}@
  
	@{init}@ 
 	@{operation}@ /* MBIERROR */

  @{finEpoch}@

  MPI_Win_free(&win);

  MPI_Finalize();
  printf("Rank %d finished normally\\n", rank);
  return 0;
}
"""


for e in epoch:
    for p in rma: 
        patterns = {}
        patterns = {'e': e, 'p': p}
        patterns['generatedby'] = f'DO NOT EDIT: this file was generated by {sys.argv[0]}. DO NOT EDIT.'  
        patterns['rmafeature'] = 'Yes'
        patterns['p'] = p 
        patterns['e'] = e 
        patterns['epoch'] = epoch[e]("1") 
        patterns['finEpoch'] = finEpoch[e]("1") 
        patterns['init'] = init[p]("1") 
        patterns['operation'] = operation[p]("1") 
        patterns['change_arg'] = ""

        # Generate a code with a null type 
        replace = patterns 
        replace['shortdesc'] = 'Invalid argument in one-sided operation.' 
        replace['longdesc'] = 'A one-sided operation has MPI_DATATYPE_NULL as a type.'
        replace['outcome'] = 'ERROR: InvalidDatatype' 
        replace['change_arg'] = 'type = MPI_DATATYPE_NULL;' 
        replace['errormsg'] = '@{p}@ at @{filename}@:@{line:MBIERROR}@ has MPI_DATATYPE_NULL as a type'
        make_file(template, f'RMADatatypeNull_{e}_{p}_nok.c', replace)

        # Generate a code with an invalid type 
        replace = patterns 
        replace['shortdesc'] = 'Invalid argument in one-sided operation.' 
        replace['longdesc'] = 'Use of an invalid datatype in one-sided operation.'
        replace['outcome'] = 'ERROR: InvalidDatatype' 
        replace['change_arg'] = 'MPI_Type_contiguous (2, MPI_INT, &type); MPI_Type_commit(&type);MPI_Type_free(&type); /* MBIERROR2 */' 
        replace['errormsg'] = 'Invalid Datatype in @{p}@ at @{filename}@:@{line:MBIERROR}@'
        make_file(template, f'RMAInvalidDatatype_{e}_{p}_nok.c', replace)
