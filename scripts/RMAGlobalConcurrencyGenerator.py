#! /usr/bin/python3
import sys
from generator_utils import make_file

template = """// @{generatedby}@
/* ///////////////////////// The MPI Bugs Initiative ////////////////////////

  Origin: MBI

  Description: @{shortdesc}@
    @{longdesc}@

BEGIN_MPI_FEATURES
	P2P!basic: Lacking 
	P2P!nonblocking: Lacking
	P2P!persistent: Lacking
	P2P!probe: Lacking
	COLL!basic: Lacking
	COLL!nonblocking: Lacking
	COLL!persistent: Lacking
	COLL!probe: Lacking
	COLL!tools: Lacking
	RMA: @{rmafeature}@
END_MPI_FEATURES

BEGIN_MBI_TESTS
  $ mpirun -np 3 ${EXE}
  | @{outcome}@
  | @{errormsg}@
END_MBI_TESTS
//////////////////////       End of MBI headers        /////////////////// */

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define NUM_ELEMT 1

int main(int argc, char **argv) {
  int nprocs = -1;
  int rank = -1;
	MPI_Win win;
  int W; // Window buffer
  int localbuf1, localbuf2; // Local buffers
	int target=1;

  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  printf("Hello from rank %d \\n", rank);

  if (nprocs < 2)
    printf("MBI ERROR: This test needs at least 2 processes to produce a bug!\\n");

  localbuf1 = 0;
  localbuf2 = 10;
  W = 4;

  MPI_Win_create(&W, NUM_ELEMT * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win);

  @{epoch}@

	if (rank == 0) {
 		@{operation1}@ /* MBIERROR1 */
	}else if (rank == 2){
 		@{operation2}@ /* MBIERROR2 */
	}

  @{finEpoch}@
	

  MPI_Win_free(&win);

  MPI_Finalize();
  printf("Rank %d finished normally\\n", rank);
  return 0;
}
"""

epoch = ['MPI_Win_fence', 'MPI_Win_lock', 'MPI_Win_lockall']
store = ['store']
load = ['load']
loadstore = ['loadstore']
# Local memory accesses (in a process)
get = ['MPI_Get']
put = ['MPI_Put'] 

epoch = {}
finEpoch = {}
operation = {}

epoch['MPI_Win_fence'] =lambda n: 'MPI_Win_fence(0, win);'
finEpoch['MPI_Win_fence'] =lambda n: 'MPI_Win_fence(0, win);'
epoch['MPI_Win_lock'] =lambda n: 'if (rank == 0 || rank == 2) {\n 	MPI_Win_lock(MPI_LOCK_EXCLUSIVE, target, 0, win);'
finEpoch['MPI_Win_lock'] =lambda n: 'MPI_Win_unlock(target, win);\n }'
epoch['MPI_Win_lockall'] =lambda n: 'MPI_Win_lock_all(0,win);'
finEpoch['MPI_Win_lockall'] =lambda n: 'MPI_Win_unlock_all(win);'

operation['MPI_Put'] = lambda n: 'MPI_Put(&localbuf1, NUM_ELEMT, MPI_INT, target, 0, NUM_ELEMT, MPI_INT, win);'
operation['store'] = lambda n: 'localbuf = 8;'
operation['loadstore'] = lambda n: 'if (localbuf % 2 == 0) {\n   localbuf++;\n   }'
operation['load'] = lambda n: 'if (localbuf % 2 == 0) {\n   /* do nothing */\n   }'
operation['MPI_Get'] = lambda n: 'MPI_Get(&localbuf2, NUM_ELEMT, MPI_INT, target, 0, NUM_ELEMT, MPI_INT, win);' 


### To change for global concurrency

for e in epoch:
    for p1 in put: 
        for p2 in get + put:
            patterns = {}
            patterns = {'e': e, 'p1': p1, 'p2': p2}
            patterns['generatedby'] = f'DO NOT EDIT: this file was generated by {sys.argv[0]}. DO NOT EDIT.'  
            patterns['rmafeature'] = 'Yes'
            patterns['p1'] = p1 
            patterns['p2'] = p2 
            patterns['e'] = e 
            patterns['epoch'] = epoch[e]("1") 
            patterns['finEpoch'] = finEpoch[e]("1") 
            patterns['operation1'] = operation[p1]("1") #put
            patterns['operation2'] = operation[p2]("2") #get or put

    		    # Generate a data race (Put + Get/Put)
            replace = patterns 
            replace['shortdesc'] = 'Global Concurrency error.' 
            replace['longdesc'] = 'Global Concurrency error. @{p2}@ conflicts with @{p1}@ on the target side' 
            replace['outcome'] = 'ERROR: GlobalConcurrency' 
            replace['errormsg'] = 'Global Concurrency error. @{p2}@ at @{filename}@:@{line:MBIERROR2}@ conflicts with @{p1}@ line @{line:MBIERROR1}@ on the target side'
            make_file(template, f'GlobalConcurrency_{e}_{p1}_{p2}_nok.c', replace)
