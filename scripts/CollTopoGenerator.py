#! /usr/bin/python3
import sys
from generator_utils import make_file

template = """// @{generatedby}@
/* ///////////////////////// The MPI Bugs Initiative ////////////////////////

  Origin: MBI

  Description: @{shortdesc}@
    @{longdesc}@

BEGIN_MPI_FEATURES
	P2P!basic: Lacking
	P2P!nonblocking: Lacking
	P2P!persistent: Lacking
	COLL!basic: @{collfeature}@
	COLL!nonblocking: @{icollfeature}@
	COLL!persistent: Lacking
	COLL!tools: @{toolfeature}@
	RMA: Lacking
END_MPI_FEATURES

BEGIN_MBI_TESTS
  $ mpirun -np 2 ${EXE}
  | @{outcome}@
  | @{errormsg}@
END_MBI_TESTS
//////////////////////       End of MBI headers        /////////////////// */

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define buff_size 128

int main(int argc, char **argv) {
  int nprocs = -1;
  int rank = -1;

	MPI_Comm newcom;

  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  printf("Hello from rank %d \\n", rank);

  if (nprocs < 2)
    printf("MBI ERROR: This test needs at least 2 processes to produce a bug!\\n");


   MPI_Comm comm;
   int dims[2], periods[2], coords[2];
   int source, dest;
   dims[0] = 2;
   dims[1] = 1;
   periods[0] = 1;
   periods[1] = 1;
 
   @{change_dims}@

   MPI_Cart_create(MPI_COMM_WORLD, 2, dims, periods, 0, &comm); /* create a cartesian communicator */

   @{change_com}@

   @{init}@
   @{operation}@ /* MBIERROR2 */
	 @{fini}@
 
   if (comm != MPI_COMM_NULL)
     MPI_Comm_free(&comm);

  MPI_Finalize();
  printf("Rank %d finished normally\\n", rank);
  return 0;
}
"""

toolfunc = ['MPI_Cart_get']

collectives = ['MPI_Bcast', 'MPI_Barrier', 'MPI_Reduce', 'MPI_Gather', 'MPI_Scatter', 'MPI_Scan', 'MPI_Exscan', 'MPI_Allgather', 'MPI_Allreduce']
icollectives = ['MPI_Ibarrier']  # 'ibarrier', 'ireduce']

init = {}
operation = {}
fini = {}

init['MPI_Cart_get'] = lambda n: ""
operation['MPI_Cart_get'] = lambda n: f'MPI_Cart_get(comm, 2, dims, periods, coords);'
fini['MPI_Cart_get'] = lambda n: ""

init['MPI_Bcast'] = lambda n: f'int buf{n}[buff_size];'
operation['MPI_Bcast'] = lambda n: f'MPI_Bcast(buf{n}, buff_size, MPI_INT, 0, newcom);'
fini['MPI_Bcast'] = lambda n: ""

init['MPI_Barrier'] = lambda n: ""
operation['MPI_Barrier'] = lambda n: 'MPI_Barrier(newcom);'
fini['MPI_Barrier'] = lambda n: ""

init['MPI_Reduce'] = lambda n: f"int sum{n}, val{n} = 1;"
operation['MPI_Reduce'] = lambda n: f"MPI_Reduce(&val{n}, &sum{n}, 1, MPI_INT, MPI_SUM, 0, newcom);"
fini['MPI_Reduce'] = lambda n: ""

init['MPI_Gather'] = lambda n: f"int val{n}=1, buf{n}[buff_size];"
operation['MPI_Gather'] = lambda n: f"MPI_Gather(&val{n}, 1, MPI_INT, buf{n},1, MPI_INT, 0, newcom);"
fini['MPI_Gather'] = lambda n: ""

init['MPI_Scatter'] = lambda n: f"int val{n}, buf{n}[buff_size];"
operation['MPI_Scatter'] = lambda n: f"MPI_Scatter(&buf{n}, 1, MPI_INT, &val{n}, 1, MPI_INT, 0, newcom);"
fini['MPI_Scatter'] = lambda n: ""

init['MPI_Allreduce'] = lambda n: f"int sum{n}, val{n} = 1;"
operation['MPI_Allreduce'] = lambda n: f"MPI_Allreduce(&val{n}, &sum{n}, 1, MPI_INT, MPI_SUM, newcom);"
fini['MPI_Allreduce'] = lambda n: ""

init['MPI_Allreduce'] = lambda n: f"int sum{n}, val{n} = 1;"
operation['MPI_Allreduce'] = lambda n: f"MPI_Allreduce(&val{n}, &sum{n}, 1, MPI_INT, MPI_SUM, newcom);"
fini['MPI_Allreduce'] = lambda n: ""

for op in toolfunc: 
    patterns = {}
    patterns = {'op': op}
    patterns['generatedby'] = f'DO NOT EDIT: this file was generated by {sys.argv[0]}. DO NOT EDIT.'
    patterns['collfeature'] = 'Yes' if op in collectives else 'Lacking'
    patterns['icollfeature'] = 'Yes' if op in icollectives else 'Lacking'
    patterns['toolfeature'] = 'Yes' if op in toolfunc else 'Lacking'
    patterns['op'] = op
    patterns['init'] = init[op]("1")
    patterns['fini'] = fini[op]("1")
    patterns['operation'] = operation[op]("1")

    # Generate the correct code 
    replace = patterns
    replace['shortdesc'] = 'Function @{op}@ with correct arguments'
    replace['longdesc'] = f'All ranks in comm call {op} with correct arguments'
    replace['outcome'] = 'OK'
    replace['errormsg'] = ''
    replace['change_com'] = '/* No error injected here */'
    replace['change_dims'] = '/* No error injected here */'
    make_file(template, f'CollCorrect_{op}_ok.c', replace)

    # Generate the incorrect code
    replace = patterns
    replace['shortdesc'] = 'The code tries to get cartesian information of MPI_COMM_WORLD.'
    replace['longdesc'] = f'The code creates a cartesian communicator, and tries to get cartesian information of MPI_COMM_WORLD.'
    replace['outcome'] = 'ERROR: InvalidCommunicator'
    replace['errormsg'] = 'Invalid Communicator in a collective. @{op}@ at @{filename}@:@{line:MBIERROR2}@ tries to get cartesian information of MPI_COMM_WORLD.'
    replace['change_com'] = 'comm = MPI_COMM_WORLD; /* MBIERROR1 */'
    make_file(template, f'CollInvalidCom_{op}_nok.c', replace)

    # Generate the code with newcom=MPI_COMM_NULL
    replace = patterns
    replace['shortdesc'] = f'Function @{op}@ called with comm=MPI_COMM_NULL' 
    replace['longdesc'] = f'Function @{op}@ called with comm=MPI_COMM_NULL'
    replace['outcome'] = 'ERROR: InvalidCommunicator'
    replace['errormsg'] = 'Invalid communicator. @{op}@ at @{filename}@:@{line:MBIERROR2}@ has MPI_COMM_NULL as a communicator.'
    replace['change_com'] = 'comm = MPI_COMM_NULL; /* MBIERROR1 */'
    make_file(template, f'CollComNull_{op}_nok.c', replace)

    # Generate the code with invalid dimension
    replace = patterns
    replace['shortdesc'] = f'Creates a cartesian communicator with a negative entry in the dims attribute' 
    replace['longdesc'] = f'Creates a cartesian communicator with a negative entry in the dims attribute, which is a usage error'
    replace['outcome'] = 'ERROR: InvalidOtherArg'
    replace['errormsg'] = 'Invalid Argument. MPI_Cart_create has invalid dimensions.'
    replace['change_com'] = "" 
    replace['change_dims'] = 'dims[0] = -2; dims[1] = -1; /* MBIERROR1 */'
    make_file(template, f'CollInvalidDim_MPI_Cart_create_nok.c', replace)
